Configura√ß√£o geral da app	     php spark config:check App
Conex√£o com banco	             php spark config:check Database
Sess√µes	                       php spark config:check Session
Logger	                       php spark config:check Logger
Encripta√ß√£o	                   php spark config:check Encryption
E-mail	                       php spark config:check Email


chmod +x install.sh
./install.sh


# Testar com cURL ou Postman
Enviar imagem para o endpoint:

curl -X POST http://localhost:8000/analyze \
  -F "file=@/caminho/para/sua/imagem.jpg"

Postman:

M√©todo: POST
URL: http://localhost:8000/analyze
Body: form-data
Key: file (type: File)
Value: selecione uma imagem real


# Ambiente virtual Python ativado, geralmente criado com:
python -m venv venv

E ativado com:
source venv/bin/activate       # Linux/macOS
.\venv\Scripts\activate        # Windows

# Limpar tudo
No terminal, rode:
# 1. Parar e remover volumes
docker-compose down -v --remove-orphans
# 2. Deletar pasta mysql quebrada
rm -rf mysql
# 3. Limpar cache do builder
docker builder prune -af

## üì° Servi√ßos:
Servi√ßo	       Porta	    Acesso
CI4 (API)	     8080	      http://localhost:8080
Python API	   8000	      http://localhost:8000/analyze
React SPA	     5173	      http://localhost:5173
MySQL	         3306	      (padr√£o local para o banco)

## üõ†Ô∏è Comandos √∫teis
# Parar e limpar tudo (inclusive volumes)
docker-compose down -v --remove-orphans

# Limpar cache de builds antigos
docker builder prune -af

# Subir os containers com rebuild
docker-compose up --build


como funciona a **comunica√ß√£o entre as tr√™s partes do seu projeto**:

## üß© Estrutura Geral

Supondo que voc√™ tenha este layout de diret√≥rios no seu projeto:

```
/API   ‚Üí API de intelig√™ncia artificial (FastAPI em Python)
/idv   ‚Üí Backend (CodeIgniter 4 em PHP)
/front ‚Üí Frontend (React)
```

---

## üîÅ Fluxo de Comunica√ß√£o entre os M√≥dulos

### 1. **Frontend (`/front`) ‚Üí Backend (`/idv`)**

* O React (frontend) faz chamadas HTTP via `axios` para as rotas da API REST que o CodeIgniter exp√µe.
* Por padr√£o, as chamadas s√£o feitas para `http://localhost:8080/api/...`
* Exemplo: `GET /api/inspections`, `POST /api/inspections`, `POST /api/analyze/:id`

```js
axios.get('http://localhost:8080/api/inspections')
```

**‚û° O backend (`idv`) precisa estar rodando no `localhost:8080`.**

---

### 2. **Backend (`/idv`) ‚Üí API Python (`/API`)**

* Quando o CodeIgniter precisa realizar an√°lise de imagem, ele faz uma requisi√ß√£o `POST` com a imagem para a FastAPI.
* Exemplo no `AnalysisController`:

```php
$response = $client->request('POST', 'http://localhost:8000/analyze', [...]);
```

**‚û° A API Python (FastAPI) precisa estar rodando no `localhost:8000`.**

---

### 3. **Resumo Visual do Fluxo**

```plaintext
[ Usu√°rio no navegador (React) ]
            |
            | 1Ô∏è‚É£ Axios
            ‚Üì
[ Backend PHP (CodeIgniter 4 - /idv) ]
            |
            | 2Ô∏è‚É£ cURL (ou Guzzle) para an√°lise de imagem
            ‚Üì
[ API Python (FastAPI - /API) ]
```

---

## üß™ Exemplo pr√°tico:

Quando o usu√°rio faz **upload de uma imagem** no frontend:

1. üîº O `UploadImage.jsx` envia o arquivo para `http://localhost:8080/api/inspections/upload-image`.
2. üìÅ O CodeIgniter salva o arquivo no `WRITEPATH`.
3. üì§ O controller `AnalysisController` envia esse arquivo via `cURL` para `http://localhost:8000/analyze`.
4. üß† A API Python retorna os dados analisados: placa, dano, √¢ngulo, etc.
5. üíæ O CodeIgniter salva os dados no banco e responde ao frontend.

---

## üîí CORS (se necess√°rio)

Se o frontend estiver hospedado em uma porta diferente, √© preciso:

* **No backend (CodeIgniter)**: permitir requisi√ß√µes CORS vindas do frontend.
* **Na API Python (FastAPI)**: adicionar CORS middleware para aceitar requisi√ß√µes do backend.

Testando se a API responde:
Acesse no navegador ou via curl:

curl -X POST http://localhost:8000/analyze \
  -F "file=@/caminho/para/imagem.jpg"
Lembre-se de testar com uma imagem existente localmente e de garantir que analyze_car_image() funcione corretamente com cv2 + easyocr.

Etapas para subir seu projeto para o GitHub:
Inicializar o Git (se ainda n√£o tiver feito):

bash
Copiar c√≥digo
git init
Adicionar todos os arquivos ao controle de vers√£o:

bash
Copiar c√≥digo
git add .
Criar o primeiro commit:

bash
Copiar c√≥digo
git commit -m "Projeto de inspe√ß√£o veicular - primeira vers√£o"
Vincular ao reposit√≥rio remoto do GitHub:

bash
Copiar c√≥digo
git remote add origin https://github.com/weslleymarcaldev/inspecao.git
Verificar se a main ou master est√° configurada como branch padr√£o:

bash
Copiar c√≥digo
git branch -M main
Enviar o projeto para o GitHub:

bash
Copiar c√≥digo
git push -u origin main
üì¶ Extras recomendados
Antes de dar o git add, √© interessante j√° garantir:

.gitignore est√° configurado (evitar subir node_modules, vendor, .env, etc.)

.env e arquivos sens√≠veis n√£o est√£o sendo rastreados

Exemplo de .gitignore b√°sico para seu projeto:

gitignore
Copiar c√≥digo
# Node
node_modules/
dist/
.env

# PHP
vendor/
.env
*.log

# Python
__pycache__/
*.pyc

# IDEs
.vscode/
.idea/

# Docker
docker/mysql/data/